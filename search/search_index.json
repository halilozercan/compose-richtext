{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Compose Richtext is a collection of Compose libraries for working with rich text formatting and Markdown rendering.  </p> <p><code>richtext-ui</code>, <code>richtext-markdown</code>, <code>richtext-commonmark</code>, and <code>richtext-ui-material</code>|<code>richtext-ui-material3</code> are Kotlin Multiplatform(KMP) Compose Libraries with the exception of iOS. All these modules can be used in Android and Desktop Compose apps. </p> <p>Each library is documented separately, see the navigation menu for the list. This site also includes an API reference.</p> <p>Warning</p> <p>This project is currently on its way to reach <code>1.0.0</code> release. The timeline is not clear and the release date will remain TBD for a while. There are no tests and some things might be broken or very non-performant.</p> <p>The API may also change between releases without deprecation cycles.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>These libraries are published to Maven Central, so just add a Gradle dependency:</p> <pre><code>dependencies {\n  implementation(\"com.halilibo.compose-richtext:&lt;LIBRARY-ARTIFACT&gt;:${richtext_version}\")\n}\n</code></pre> <p>There is no difference for KMP artifacts. For instance, if you are adding <code>richtext-ui</code> to a Kotlin Multiplatform module</p> <pre><code>val commonMain by getting {\n  dependencies {\n    implementation(\"com.halilibo.compose-richtext:richtext-ui:${richtext_version}\")\n  }\n}\n</code></pre>"},{"location":"#library-artifacts","title":"Library Artifacts","text":"<p>The <code>LIBRARY_ARTIFACT</code>s for each individual library can be found on their respective pages.</p>"},{"location":"#samples","title":"Samples","text":"<p>Please check out Android and Desktop projects to see various use cases of RichText in both platforms.</p>"},{"location":"richtext-commonmark/","title":"Commonmark Markdown","text":"<p>Library for parsing and rendering Markdown in Compose using CommonMark library/spec to parse, and richtext-markdown to render.</p>"},{"location":"richtext-commonmark/#gradle","title":"Gradle","text":"<pre><code>dependencies {\n  implementation(\"com.halilibo.compose-richtext:richtext-commonmark:${richtext_version}\")\n}\n</code></pre>"},{"location":"richtext-commonmark/#parsing","title":"Parsing","text":"<p><code>richtext-markdown</code> module renders a given Markdown Abstract Syntax Tree. It accepts a root  <code>AstNode</code>. This library gives you a parser called <code>CommonmarkAstNodeParser</code> to easily convert any  String to an <code>AstNode</code> that represents the Markdown tree.</p> <pre><code>    val parser = CommonmarkAstNodeParser()\n    val astNode = parser.parse(\n        \"\"\"\n        # Demo\n\n        Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. [Links with two blocks, text in square-brackets, destination is in parentheses.](https://www.example.com). Inline `code` has `back-ticks around` it.\n\n        1. First ordered list item\n        2. Another item\n            * Unordered sub-list.\n        3. And another item.\n            You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n        * Unordered list can use asterisks\n        - Or minuses\n        + Or pluses\n        \"\"\".trimIndent()\n    )\n    // ...\n\n    RichTextScope.BasicMarkdown(astNode)\n</code></pre>"},{"location":"richtext-commonmark/#rendering","title":"Rendering","text":"<p>The simplest way to render markdown is just pass a string to the <code>Markdown</code> composable under RichText scope:</p> <pre><code>RichText(\n  modifier = Modifier.padding(16.dp)\n) {\n  Markdown(\n    \"\"\"\n    # Demo\n\n    Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. [Links with two blocks, text in square-brackets, destination is in parentheses.](https://www.example.com). Inline `code` has `back-ticks around` it.\n\n    1. First ordered list item\n    2. Another item\n        * Unordered sub-list.\n    3. And another item.\n        You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n    * Unordered list can use asterisks\n    - Or minuses\n    + Or pluses\n    ---\n\n    ```javascript\n    var s = \"code blocks use monospace font\";\n    alert(s);\n    ```\n\n    Markdown | Table | Extension\n    --- | --- | ---\n    *renders* | `beautiful images` | ![random image](https://picsum.photos/seed/picsum/400/400 \"Text 1\")\n    1 | 2 | 3\n\n    &gt; Blockquotes are very handy in email to emulate reply text.\n    &gt; This line is part of the same quote.\n    \"\"\".trimIndent()\n  )\n}\n</code></pre> <p>Which produces something like this:</p> <p></p>"},{"location":"richtext-commonmark/#markdownparseoptions","title":"<code>MarkdownParseOptions</code>","text":"<p>Passing <code>MarkdownParseOptions</code> into either <code>Markdown</code> composable or <code>CommonmarkAstNodeParser.parse</code> method provides the ability to control some aspects of the markdown parser:</p> <pre><code>val markdownParseOptions = MarkdownParseOptions(\n  autolink = false\n)\n\nMarkdown(\n  markdownParseOptions = markdownParseOptions\n)\n</code></pre>"},{"location":"richtext-markdown/","title":"Markdown","text":"<p>Library for rendering Markdown tree that is defined as an <code>AstNode</code>. This module would be useless for someone who is looking to just render a Markdown string. Please check out  <code>richtext-commonmark</code> for such features. <code>richtext-markdown</code> behaves as sort of a building block. You can create your own parser or use 3rd party ones that converts any Markdown string to an  <code>AstNode</code> tree.</p>"},{"location":"richtext-markdown/#gradle","title":"Gradle","text":"<pre><code>dependencies {\n  implementation(\"com.halilibo.compose-richtext:richtext-markdown:${richtext_version}\")\n}\n</code></pre>"},{"location":"richtext-markdown/#rendering","title":"Rendering","text":"<p>The simplest way to render markdown is just pass an <code>AstNode</code> to the <code>BasicMarkdown</code> composable under RichText scope:</p> <pre><code>RichText(\n  modifier = Modifier.padding(16.dp)\n) {\n  // requires richtext-commonmark module.\n  val parser = remember(options) { CommonmarkAstNodeParser(options) }\n  val astNode = remember(parser) {\n    parser.parse(\n      \"\"\"\n        # Demo\n\n        Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. [Links with two blocks, text in square-brackets, destination is in parentheses.](https://www.example.com). Inline `code` has `back-ticks around` it.\n\n        1. First ordered list item\n        2. Another item\n            * Unordered sub-list.\n        3. And another item.\n            You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n        * Unordered list can use asterisks\n        - Or minuses\n        + Or pluses\n        \"\"\".trimIndent()\n    )\n  }\n  BasicMarkdown(astNode)\n}\n</code></pre>"},{"location":"richtext-ui-material/","title":"Richtext UI Material","text":"<p>Library that makes RichText compatible with Material design in Compose.</p>"},{"location":"richtext-ui-material/#gradle","title":"Gradle","text":"<pre><code>dependencies {\n  implementation(\"com.halilibo.compose-richtext:richtext-ui-material:${richtext_version}\")\n}\n</code></pre>"},{"location":"richtext-ui-material/#usage","title":"Usage","text":"<p>Material RichText library provides a single composable called <code>RichText</code> which automatically passes down Material theming attributes to <code>BasicRichText</code>. </p>"},{"location":"richtext-ui-material/#richtext","title":"<code>RichText</code>","text":"<p><code>RichText</code> composable wraps around regular <code>BasicRichText</code> while introducing the necessary integration dependencies. <code>RichText</code> shares the exact arguments with regular <code>BasicRichText</code>.</p> <pre><code>RichText(modifier = Modifier.background(color = Color.White)) {\n  Heading(0, \"Paragraphs\")\n  Text(\"Simple paragraph.\")\n  ...\n}\n</code></pre>"},{"location":"richtext-ui-material3/","title":"Richtext UI Material 3","text":"<p>Library that makes RichText compatible with Material design in Compose.</p>"},{"location":"richtext-ui-material3/#gradle","title":"Gradle","text":"<pre><code>dependencies {\n  implementation(\"com.halilibo.compose-richtext:richtext-ui-material3:${richtext_version}\")\n}\n</code></pre>"},{"location":"richtext-ui-material3/#usage","title":"Usage","text":"<p>Material3 RichText library provides a single composable called <code>RichText</code> which automatically passes down Material3 theming attributes to <code>BasicRichText</code>.</p>"},{"location":"richtext-ui-material3/#richtext","title":"<code>RichText</code>","text":"<p><code>RichText</code> composable wraps around regular <code>BasicRichText</code> while introducing the necessary integration dependencies. <code>RichText</code> shares the exact arguments with regular <code>BasicRichText</code>.</p> <pre><code>RichText(modifier = Modifier.background(color = Color.White)) {\n  Heading(0, \"Paragraphs\")\n  Text(\"Simple paragraph.\")\n  ...\n}\n</code></pre>"},{"location":"richtext-ui/","title":"Richtext UI","text":"<p>A library of Composables for formatting text using higher-level concepts than are not supported by compose foundation, such as \"ordered lists\" and \"headings\".</p> <p>Richtext UI is a base library that is non-opinionated about higher level design requirements. If you are already using <code>MaterialTheme</code> in your compose app, you can jump to RichText UI Material for a quick start. There is also Material3 flavor at RichText UI Material3</p>"},{"location":"richtext-ui/#gradle","title":"Gradle","text":"<pre><code>dependencies {\n  implementation(\"com.halilibo.compose-richtext:richtext-ui:${richtext_version}\")\n}\n</code></pre>"},{"location":"richtext-ui/#basicrichtext","title":"<code>BasicRichText</code>","text":"<p>Richtext UI does not depend on Material artifact of Compose. Design agnostic API allows anyone to adopt Richtext UI and its extensions like Markdown to their own design and typography systems. Hence, just like <code>foundation</code> and <code>material</code> modules of Compose, this library also names the  building block with <code>Basic</code> prefix.</p> <p>If you are planning to adopt RichText within your design system, please go ahead and check out <code>RichText Material</code> for inspiration.</p>"},{"location":"richtext-ui/#richtextscope","title":"<code>RichTextScope</code>","text":"<p><code>RichTextScope</code> is a context wrapper around Composables that integrate and play well within Richtext content. </p>"},{"location":"richtext-ui/#richtextthemeprovider","title":"<code>RichTextThemeProvider</code>","text":"<p>Entry point for integrating app's own typography and theme system with BasicRichText.</p> <p>API for this integration is highly influenced by how compose-material theming is designed. RichText library assumes that almost all Theme/Design systems would have composition locals that provide a TextStyle downstream.</p> <p>Moreover, text style should not include text color by best practice. Content color exists to figure out text color in the current context. Light/Dark theming leverages content color to influence not just text but other parts of theming as well.</p>"},{"location":"richtext-ui/#example","title":"Example","text":"<p>Open the <code>Demo.kt</code> file in the <code>sample</code> module to play with this. Although the mentioned demo uses Material integrated version of <code>RichText</code>, they share exactly the same API.</p> <pre><code>BasicRichText(\n  modifier = Modifier.background(color = Color.White)\n) {\n  Heading(0, \"Paragraphs\")\n  Text(\"Simple paragraph.\")\n  Text(\"Paragraph with\\nmultiple lines.\")\n  Text(\"Paragraph with really long line that should be getting wrapped.\")\n\n  Heading(0, \"Lists\")\n  Heading(1, \"Unordered\")\n  ListDemo(listType = Unordered)\n  Heading(1, \"Ordered\")\n  ListDemo(listType = Ordered)\n\n  Heading(0, \"Horizontal Line\")\n  Text(\"Above line\")\n  HorizontalRule()\n  Text(\"Below line\")\n\n  Heading(0, \"Code Block\")\n  CodeBlock(\n    \"\"\"\n      {\n        \"Hello\": \"world!\"\n      }\n    \"\"\".trimIndent()\n  )\n\n  Heading(0, \"Block Quote\")\n  BlockQuote {\n    Text(\"These paragraphs are quoted.\")\n    Text(\"More text.\")\n    BlockQuote {\n      Text(\"Nested block quote.\")\n    }\n  }\n\n  Heading(0, \"Info Panel\")\n  InfoPanel(InfoPanelType.Primary, \"Only text primary info panel\")\n  InfoPanel(InfoPanelType.Success) {\n    Column {\n      Text(\"Successfully sent some data\")\n      HorizontalRule()\n      BlockQuote {\n        Text(\"This is a quote\")\n      }\n    }\n  }\n\n  Heading(0, \"Table\")\n  Table(headerRow = {\n    cell { Text(\"Column 1\") }\n    cell { Text(\"Column 2\") }\n  }) {\n    row {\n      cell { Text(\"Hello\") }\n      cell {\n        CodeBlock(\"Foo bar\")\n      }\n    }\n    row {\n      cell {\n        BlockQuote {\n          Text(\"Stuff\")\n        }\n      }\n      cell { Text(\"Hello world this is a really long line that is going to wrap hopefully\") }\n    }\n  }\n}\n</code></pre> <p>Looks like this:</p> <p></p>"}]}